
package interfaces;


import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import javax.swing.JOptionPane;
import javax.swing.UIManager;


import logic.saveBean;
import logic.userbean;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

public class Live extends javax.swing.JFrame {

 boolean b=true;  
  int g_sum=0;
        int b_sum=0; 
    public void display()
    {
        
        Thread a=new Thread(){
         public void run()
         {
             
                 try {
                     while(true)
                {
                 
                 Calendar cal=new GregorianCalendar();
                 int day=cal.get(Calendar.DAY_OF_MONTH);
                 int month=cal.get(Calendar.MONTH);
                 int year=cal.get(Calendar.YEAR);
                 
                 int second=cal.get(Calendar.SECOND);
                 int minute=cal.get(Calendar.MINUTE);
                 int hour=cal.get(Calendar.HOUR);
             
                 lblclock.setText(year+"-"+month+"-"+day+"  "+hour+" : "+minute+" : "+second);
                 
                     Thread.sleep(1000);}
                 } catch (InterruptedException ex) {
                     Logger.getLogger(Live.class.getName()).log(Level.SEVERE, null, ex);
                 }
             
             }
         
        };
        a.start();
    }
    public Live() {
        initComponents();
    
       display(); 
        
        
        
    }
    /*public void get(int good,int bad)
    {
        System.out.println(good+"");
    }*/

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblclock = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        stop = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        bar_chart = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        st1 = new javax.swing.JLabel();
        st2 = new javax.swing.JLabel();
        st3 = new javax.swing.JLabel();
        st4 = new javax.swing.JLabel();
        st5 = new javax.swing.JLabel();
        st6 = new javax.swing.JLabel();
        st7 = new javax.swing.JLabel();
        st8 = new javax.swing.JLabel();
        stop1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblclock.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of perfective product");

        jLabel3.setText("Number of defective product");

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jButton2.setText("chart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        bar_chart.setText("bar chart");
        bar_chart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bar_chartActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Stage_4");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Stage_1");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Stage_2");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Stage_3");

        stop1.setText("Error Percentage");
        stop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButton1)
                        .addGap(27, 27, 27)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(stop))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(st2, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                            .addComponent(st1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(145, 145, 145)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(st3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(st4, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(st5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(st6, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(bar_chart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(stop1)
                                .addGap(27, 27, 27)
                                .addComponent(lblclock, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(st7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(st8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(st1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(st3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(st5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(st7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(st2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(st4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(st6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(st8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(stop)
                            .addComponent(jButton2)
                            .addComponent(bar_chart)
                            .addComponent(stop1))
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblclock, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        DefaultCategoryDataset dataset = new DefaultCategoryDataset(); // for the bar chart
//        JFreeChart chartbar = ChartFactory.createBarChart("Current Product Status", "Status","No.Products", dataset, PlotOrientation.VERTICAL,false, true,false);
//        CategoryPlot pbar = chartbar.getCategoryPlot();
//        pbar.setRangeCrosshairPaint(Color.BLACK);
//        ChartFrame framebar= new ChartFrame("Current Product Status", chartbar);
//        framebar.setVisible(true);
//        framebar.setSize(450,350);
        
           // end of the bar chart
        DefaultPieDataset pie1 = new DefaultPieDataset();
        JFreeChart chart1 = ChartFactory.createPieChart("Stage 1", pie1, true,true,true);
        PiePlot p=(PiePlot)chart1.getPlot();
        ChartFrame frame = new ChartFrame("Stage 1", chart1);
        frame.setVisible(true);
        frame.setSize(450,500); // pie chart product 1
      
        
        
        DefaultPieDataset pie2 = new DefaultPieDataset();
        JFreeChart chart2 = ChartFactory.createPieChart("Stage 2", pie2, true,true,true);
        PiePlot ppai=(PiePlot)chart2.getPlot();
        ChartFrame frame2 = new ChartFrame("Stage 2", chart2);
        frame2.setVisible(true);
        frame2.setSize(450,500);    // pie chart product 2
        
        
        DefaultPieDataset pie3 = new DefaultPieDataset();
        JFreeChart chart3 = ChartFactory.createPieChart("Stage 3", pie3, true,true,true);
        PiePlot p3=(PiePlot)chart3.getPlot();
        ChartFrame frame3 = new ChartFrame("Stage 3", chart3);
        frame3.setVisible(true);
        frame3.setSize(450,500); // pie chart product 3
      
        
        
        DefaultPieDataset pie4 = new DefaultPieDataset();
        JFreeChart chart4 = ChartFactory.createPieChart("Stage 4", pie4, true,true,true);
        PiePlot p4=(PiePlot)chart4.getPlot();
        ChartFrame frame4 = new ChartFrame("Stage 4", chart4);
        frame4.setVisible(true);
        frame4.setSize(450,500);    // pie chart product 4
        
        
        b=true;
        Thread a=new Thread()
        {
        public void run()
        {
            int good_sum=0;
                    
        int bad_sum=0;
        int i=0;
        int count=0;
        int filename=0;
        String filepath = "C:\\csv";
         while(b)
		{
                    i++;
                    
                    if(count==5){
                        filename++;
                        logic.csv_file csv = new logic.csv_file();
                        //csv.autosave(filepath, filename);
                        //csv.deletetabledata();
                        count=0;
                    }
                    
			try {
				Thread.sleep(1000);
               
                             Date date=new Date();
                                DateFormat df=new SimpleDateFormat("dd-MM-yy ");
                                DateFormat df1=new SimpleDateFormat("hh:mm:ss");
                                int id=1;
                                int eid=1;
                                 int id2=2;
                                int eid2=2;
                                 int id3=3;
                                int eid3=3;
                                 int id4=4;
                                int eid4=4;
                                Random a=new Random();
                                
                                int bad=a.nextInt(50);
                                int good=100-bad;
                                int bad2=a.nextInt(50);
                                int good2=100-bad2;
                                int bad3=a.nextInt(50);
                               int good3=100-bad3;
                                int bad4=a.nextInt(50);
                                int good4=100-bad4;
                                saveBean s=new saveBean();
                                s.setsId(id);
                                s.setG_prod(good);
                                s.setB_prod(bad);
                                s.setSid2(id2);
                                s.setG2(good2);
                                s.setB2(bad2);
                                s.setSid3(id3);
                                s.setG3(good3);
                                s.setB3(bad3);
                                s.setSid4(id4);
                                s.setG4(good4);
                                s.setB4(bad4);
                                s.setEid2(eid2);
                                s.setEid3(eid3);
                                s.setEid4(eid4);
                                
                                Date date1=df.parse(df.format(date));
                                Date time=df1.parse(df1.format(date));
                                s.setDate(date1);
                                s.setTime(time);                                
                                good_sum+=good;
                                bad_sum+=bad;
                               userbean nm=new userbean();
                               String user=nm.getUserName();
                               s.setEid(eid);
//                                sumabs.setText(good_sum+"");
//                               sumbad.setText(bad_sum+"");
st1.setText(good+"");
                               st2.setText(bad+"");
                               st3.setText(good2+"");
                               st4.setText(bad2+"");
                               st5.setText(good3+"");
                               st6.setText(bad3+"");
                               st7.setText(good4+"");
                               st8.setText(bad4+"");
                                g_sum+=good_sum; 
                                b_sum+=bad_sum;
                                logic.SaveInformation n=new logic.SaveInformation();
                               n.SaveInformation(s);
                               n.SaveInformation2(s);
                               n.SaveInformation3(s);
                               n.SaveInformation4(s);
                                
        pie1.setValue("Defective",new Integer(bad));
        pie1.setValue("Perfective",new Integer(good));   /// pai chart for  product 1
        
        pie2.setValue("Defective",new Integer(bad2));
        pie2.setValue("Perfective",new Integer(good2));   /// pai chart for product 2

                                
        pie3.setValue("Defective",new Integer(bad3));
        pie3.setValue("Perfective",new Integer(good3));   /// pai chart for  product 3
        
        pie4.setValue("Defective",new Integer(bad4));
        pie4.setValue("Perfective",new Integer(good4));   /// pai chart for product 4       
//        dataset.setValue(new Integer(good), "Marks","Efective");
//        dataset.setValue(new Integer(bad), "Marks","Defectives");
        
       // p.setForegroundAlpha(TOP_ALIGNMENT);
        
                               
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			} catch (ParseException ex) {
                 Logger.getLogger(MainDashBoard.class.getName()).log(Level.SEVERE, null, ex);
             }
		}    
        }
        };
        a.start();
                
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        b=false;
    }//GEN-LAST:event_stopActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("Defective",new Integer(b_sum));
        pieDataset.setValue("Perfective",new Integer(g_sum));
        JFreeChart chart = ChartFactory.createPieChart("Total Product Status", pieDataset, true,true,true);
        PiePlot p=(PiePlot)chart.getPlot();
       // p.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame = new ChartFrame("Total Product Status", chart);
        frame.setVisible(true);
        frame.setSize(450,500);
        
        
//        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//         ///dataset.setValue(g_sum, "NORMAL", "NORMAL");
//      // dataset.setValue(b_sum, "NORMAL", "NORMAL");
//        JFreeChart chart = ChartFactory.createLineChart("title", "categoryAxisLabel", "valueAxisLabel", dataset, PlotOrientation.VERTICAL,false, true, false);
//        chart.setBackgroundPaint(Color.yellow);
//        chart.getTitle().setPaint(Color.blue);
//        CategoryPlot p =chart.getCategoryPlot();
//        p.setRangeGridlinePaint(Color.BLUE);
//        ChartFrame frame=new ChartFrame("Bar Chart for Parameters",chart);
//        frame.setVisible(true);
//        frame.setSize(450,350);
        
       // dataset.setValue(80,"Values","perfectives");
       // dataset.setValue(100,"Values","perfectives");
                
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bar_chartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bar_chartActionPerformed
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                dataset.setValue(new Integer(g_sum), "Marks","Efective");
                dataset.setValue(new Integer(b_sum), "Marks","Defectives");
//                dataset.setValue(75, "Marks","Student3");
//                dataset.setValue(95, "Marks","Student4");
                
                JFreeChart chart = ChartFactory.createBarChart("Products Status", "Status","No.Products", dataset, PlotOrientation.VERTICAL,false, true,false);
                CategoryPlot p = chart.getCategoryPlot();
                p.setRangeCrosshairPaint(Color.BLACK);
                ChartFrame frame= new ChartFrame("Bar Chart Display", chart);
                frame.setVisible(true);
                frame.setSize(450,350);
    }//GEN-LAST:event_bar_chartActionPerformed

    private void stop1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop1ActionPerformed
        logic.dataAccess data = new logic.dataAccess(); 
        int good = data.getgoodsum("production");
        int bad  = data.getbadsum("production");
        int count = data.getcount("production");
        float percentage1 = (float)bad/(count);
        String p1 = String.format ("%,.2f", percentage1);
     
        good = data.getgoodsum("production_2");
        bad  = data.getbadsum("production_2");
        count = data.getcount("production_2");
        float percentage2 = (float)bad/(count);
        String p2 = String.format ("%,.2f", percentage2);
        
        good = data.getgoodsum("production_3");
        bad  = data.getbadsum("production_3");
        count = data.getcount("production_3");
        float percentage3 = (float)bad/(count);
        String p3 = String.format ("%,.2f", percentage3);
        
        good = data.getgoodsum("production_4");
        bad  = data.getbadsum("production_4");
        count = data.getcount("production_4");
        float percentage4 = (float)bad/(count);
        String p4 = String.format ("%,.2f", percentage4);
        
        UIManager.put("OptionPane.messageFont", new Font("Arial", Font.PLAIN, 18));
        UIManager.put("OptionPane.buttonFont", new Font("Arial", Font.PLAIN, 18));
        
        JOptionPane.showMessageDialog(rootPane, "Stage 1 Error percentage: "+p1+"%\n"+
                                                "Stage 2 Error percentage: "+p2+"%\n"+  
                                                "Stage 3 Error percentage: "+p3+"%\n"+
                                                "Stage 4 Error percentage: "+p4+"%\n");
    }//GEN-LAST:event_stop1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Live.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Live.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Live.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Live.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Live().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bar_chart;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblclock;
    private javax.swing.JLabel st1;
    private javax.swing.JLabel st2;
    private javax.swing.JLabel st3;
    private javax.swing.JLabel st4;
    private javax.swing.JLabel st5;
    private javax.swing.JLabel st6;
    private javax.swing.JLabel st7;
    private javax.swing.JLabel st8;
    private javax.swing.JButton stop;
    private javax.swing.JButton stop1;
    // End of variables declaration//GEN-END:variables
}
